@page "/journal"

@inject JournalState _journalState
@inject IJournalService _journalService
@inject IJSRuntime _jsRuntime

<div class="container">
    <h1 class="text-center fw-bold">Journal</h1>
    <div class="row">
        <div class="col-sm-9">
            <div class="row">
                <div class="col-sm">
                    <JournalTable Links="Links" Number="@_number" OnSelectedPage="OnSelectedPage" SelectTransport="SelectTransport"
                                  TransportDtos="_journalState.TransportDtos"></JournalTable>
                </div>
            </div>
            <div class="row">
                <div class="col-sm">
                    <AxlesTable AxlesDtos="AxlesDtos" ></AxlesTable>
                </div>
            </div>
        </div>
        <div class="col-sm">
           <div class="card ms-2" style="width: 18rem;">
            <div class="card-body">
                <h5 class="card-title">Select by dates</h5>
                <form>
                    <div class="mt-3">
                        <label class="form-label fw-bold"><i class="fa-solid fa-calendar-days"></i>&nbsp;Start date</label>
                    </div>
                    <div>
                        <input class="form-control" type="date" @bind-value="_startDate" />
                    </div>
                    <div class="mt-3">
                        <label class="form-label fw-bold"><i class="fa-solid fa-calendar-days"></i>&nbsp;End date</label>
                    </div>
                    <div>
                        <input class="form-control" type="date" @bind-value="_endDate" />
                    </div>
                </form>
                <div class="d-flex flex-column mt-2">
                    <button class="btn btn-success fw-bold" @onclick="async() => await GetByDatesAsync()" @onclick:preventDefault @onclick:stopPropagation>Select</button>
                    <button class="btn btn-secondary fw-bold mt-2" @onclick="() => ReturnToFull()">Return</button>
                </div>
            </div>
            </div>
        </div>
    </div>
</div>
<ErrorModal CloseAsync="CloseErrorModalAsync" ErrorMessage="@_errorMessage" />

@code {
    private List<PagingLink> Links { get; set; } = new List<PagingLink>();
    private List<AxlesDto> AxlesDtos { get; set; } = new List<AxlesDto>();
    private PageParameters PageParameters { get; set; } = new();
    private int _spread = 2;
    private int _pageSize = 6;
    private int _number = 0;
    private DateTime _startDate { get; set; } = DateTime.Now;
    private DateTime _endDate { get; set; } = DateTime.Now;
    private ErrorDetails ErrorDetails { get; set; } = new();
    private IJSObjectReference? _modalModule;
    private string _errorMessage = "";

    protected override async Task OnParametersSetAsync()
    {
        _modalModule = await _jsRuntime.InvokeAsync<IJSObjectReference>("import", "./js/modalHandler.js");
        await GetJournalAsync();
        CreatePaginationLinks();
        StateHasChanged();
    }

    private async Task GetJournalAsync()
    {
        PageParameters.PageSize = _pageSize;
        var response = await _journalService.GetJournalAsync(PageParameters);
        if (response.IsSuccessStatusCode)
        {
            var pagingResponse = await response.GetPagingResponseAsync<TransportDto>("X-Pagination");
            _journalState.TransportDtos = pagingResponse.Items;
            _journalState.Metadata = pagingResponse.Metadata;
        }
        else
        {
            var errorDetails = await response.GetErrorDetailsAsync();
            _errorMessage = errorDetails.Message! + $" Status code: {errorDetails.StatusCode}";
            StateHasChanged();
            await _modalModule.InvokeVoidAsync("showErrorModal");
        }
        _journalState.IsByDates = false;
    }

    private async Task SelectedPage(int page)
    {
        PageParameters.PageNumber = page;
        if (!_journalState.IsByDates)
            await GetJournalAsync();
        else
            await GetByDatesAsync();
    }

    private async Task OnSelectedPage(PagingLink link)
    {
        if (link.Page == _journalState.Metadata.CurrentPage || !link.Enabled)
            return;
        _journalState.Metadata.CurrentPage = link.Page;
        await SelectedPage(link.Page);
        CreatePaginationLinks();
        StateHasChanged();
    }

    private async Task GetByDatesAsync()
    {
        _journalState.IsByDates = true;
        PageParameters.PageSize = _pageSize;
        var response = await _journalService.GetJournalByDatesAsync(PageParameters, _startDate, _endDate);
        if (response.IsSuccessStatusCode)
        {
            var pagingResponse = await response.GetPagingResponseAsync<TransportDto>("X-Pagination");
            _journalState.TransportDtos = pagingResponse.Items;
            _journalState.Metadata = pagingResponse.Metadata;
        }
        else
        {
            var errorDetails = await response.GetErrorDetailsAsync();
            _errorMessage = errorDetails.Message! + $" Status code: {errorDetails.StatusCode}";
            StateHasChanged();
            await _modalModule.InvokeVoidAsync("showErrorModal");
        }

        CreatePaginationLinks();
        StateHasChanged();
    }

    private void CreatePaginationLinks()
    {
        if (_journalState.TransportDtos.Count > 0)
        {
            Links = new List<PagingLink>();
            Links.Add(new PagingLink(_journalState.Metadata.CurrentPage - 1, _journalState.Metadata.HasPrevious, "Prev"));
            for (int i = 1; i <= _journalState.Metadata.TotalPages; i++)
            {
                if (i >= _journalState.Metadata.CurrentPage - _spread && i <= _journalState.Metadata.CurrentPage + _spread)
                {
                    Links.Add(new PagingLink(i, true, i.ToString()) { Active = _journalState.Metadata.CurrentPage == i });
                }
            }
            Links.Add(new PagingLink(_journalState.Metadata.CurrentPage + 1, _journalState.Metadata.HasNext, "Next"));
            _number = _pageSize;
            _number = _number * (_journalState.Metadata.CurrentPage - 1);
        }
    }

    private void ReturnToFull()
    {
        _journalState.IsByDates = true;
        StateHasChanged();
    }

    private void SelectTransport(TransportDto dto)
    {
        AxlesDtos = new List<AxlesDto>();
        int count = 1;
        foreach (var axle in dto.AxlesDtos)
        {
            AxlesDtos.Add(new AxlesDto { AxleNumber = count, LoadPerAxle = axle.LoadPerAxle });
            count++;
        }
        StateHasChanged();
    }

    private async Task CloseErrorModalAsync()
    {
        await _modalModule.InvokeVoidAsync("hideErrorModal");
    }
}
